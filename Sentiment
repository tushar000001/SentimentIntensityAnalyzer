import requests
from bs4 import BeautifulSoup
import pandas as pd
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk

try:
    nltk.data.find('vader_lexicon/vader_lexicon.zip')
except LookupError:
    nltk.download('vader_lexicon')

url = 'https://www.flipkart.com/hamtex-polycotton-double-bed-cover/product-reviews/itma5c9f08efe504?pid=BCVG2ZGSDZ3WSGTF&lid=LSTBCVG2ZGSDZ3WSGTFDBZ9IO&marketplace=FLIPKART'

try:
    response = requests.get(url)
    response.raise_for_status()
    content = response.content

    soup = BeautifulSoup(content, 'html.parser')

    reviews_container = soup.find('div', {'class': '_1YokD2 _3Mn1Gg col-9-12'})

    reviews = []
    if reviews_container:
        review_divs = reviews_container.find_all('div', {'class': 't-ZTKy'})
        for review_div in review_divs:
            text = review_div.text.strip()
            reviews.append(text)
    else:
        print("Review container not found. Check the website structure.")

    data = pd.DataFrame({'review': reviews})
    data.to_excel('reviews.xlsx', index=False)

    sid = SentimentIntensityAnalyzer()

    def sentiment_Vader(text):
        if not isinstance(text, str) or not text: # Handle empty or non-string reviews
            return "neutral"  # Or another appropriate default
        over_all_polarity = sid.polarity_scores(text)
        if over_all_polarity['compound'] >= 0.05:
            return "positive"
        elif over_all_polarity['compound'] <= -0.05:
            return "negative"
        else:
            return "neutral"

    data['polarity'] = data['review'].apply(sentiment_Vader)

    sentiment_result_file = 'sentiment_result.xlsx'
    data.to_excel(sentiment_result_file, index=False)
    print(f"Sentiment analysis complete. Results saved to {sentiment_result_file}")

except requests.exceptions.RequestException as e:
    print(f"Error fetching URL: {e}")
except Exception as e:
    print(f"An error occurred: {e}")
